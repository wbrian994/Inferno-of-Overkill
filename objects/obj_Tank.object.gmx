<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Tank_Hull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Vehicle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Tank
image_speed = 0;
accel = 0.25;
decel = 0.2;
top_speed = 8;
top_speed_reverse = 6;
brake_power = 2;
turn_speed = 45 / room_speed;
turret_offset_x = 2 * image_xscale;
turret_offset_y = -2 * image_yscale;

driver = noone;
can_drive = false;

turret_locked = false;

max_hp = 1000;
hp = max_hp;

team = TEAM_FRIENDLY;

name = "Tank";

//Keys
key_forward = ord('W');
key_backward = ord('S');
key_left = ord('A');
key_right = ord('D');
key_brake = vk_space;
key_lock = vk_alt;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Turret
turret = instance_create(x + turret_offset_x, y + turret_offset_y,obj_Tank_Turret);
turret.tank = self.id;
turret.image_xscale = image_xscale;
turret.image_yscale = image_yscale;
turret.direction = direction;
turret.image_angle = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation Control
image_speed = (speed * (1 / room_speed)) * 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turret
if(!turret_locked)
{
    turret.angle_target = point_direction(turret.x,turret.y,mouse_x,mouse_y);
}
var offset = get_offset(direction,turret_offset_x,turret_offset_y);
turret.x = x + offset[0];
turret.y = y + offset[1];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Experimental Manual Collision Resolution

//keep collisions axis aligned
var oldia = image_angle;
image_angle = 0;

var foundCollision = collision_rectangle(bbox_left + min(0, -hspeed), bbox_top + min(0, -vspeed), bbox_right + max(0, -hspeed), bbox_bottom + max(0, -vspeed), obj_solid, false, true);

image_angle = oldia;

if(foundCollision)
{
    //return to previous position
    x = xprevious;
    y = yprevious;
    
    //advance position to meet obstruction
    if(vspeed &gt; 0)
    {
        move_contact_solid(270,vspeed);
    }
    else if(vspeed &lt; 0)
    {
        move_contact_solid(90,-vspeed);
    }
    if(hspeed &gt; 0)
    {
        move_contact_solid(0,hspeed);
    }
    else if(hspeed &lt; 0)
    {
        move_contact_solid(180,-hspeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_drive = driver != noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>can_drive</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tank Movement
if(keyboard_check(key_forward))
{
    speed = min(speed + (accel + friction),top_speed);
}
if(keyboard_check(key_backward))
{
    speed = max(speed - (accel + friction),-top_speed);
}
if(keyboard_check(key_left))
{
    direction += turn_speed;
    if(turret_locked)
    {
        turret.direction += turn_speed;
        turret.angle_target += turn_speed;
    }
    image_speed = 1;
}
if(keyboard_check(key_right))
{
    direction -= turn_speed;
    if(turret_locked)
    {
        turret.direction -= turn_speed;
        turret.angle_target -= turn_speed;
    }
    image_speed = 1;
}
if(keyboard_check(key_brake))
{
    friction = brake_power;
}
else
{
    friction = decel;
}
if(keyboard_check_pressed(key_lock))
{
    turret_locked = !turret_locked;
}

image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Unit_Par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.id != driver &amp;&amp; abs(speed) &gt; 0)
{
    other.hp = 0;
    other.direction = point_direction(other.x,other.y,x,y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
