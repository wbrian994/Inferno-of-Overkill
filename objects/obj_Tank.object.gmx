<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Tank_Hull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>obj_Vehicle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Tank
if(global.is_christmas)
{
    sprite_index = spr_Christmas_Tank_Hull;
}
image_speed = 0;
accel = 0.15;
decel = 0.2;
top_speed = 12;
top_speed_reverse = 6;
brake_power = 2;
turn_speed = 45 / room_speed;
turret_offset_x = 2 * image_xscale;
turret_offset_y = -2 * image_yscale;
direction = image_angle;
show_muzzle_flash = false;

team = TEAM_NONE;
driver = noone;
armor = 6.25;
can_drive = false;

turret_locked = false;

max_hp = 1000;
hp = max_hp;

team = TEAM_FRIENDLY;

name = "Tank";

//sounds
start_sound = -1;
engine_sound = -1;
engine_pitch = 1;

//Keys
key_forward = ord('W');
key_backward = ord('S');
key_left = ord('A');
key_right = ord('D');
key_brake = vk_space;
key_lock = vk_alt;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Turret
turret = instance_create(x + turret_offset_x, y + turret_offset_y,obj_Tank_Turret);
turret.tank = self.id;
turret.image_xscale = image_xscale;
turret.image_yscale = image_yscale;
turret.direction = direction;
turret.image_angle = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take care of sound
if(engine_sound != -1)
{
    audio_stop_sound(engine_sound);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation Control
image_speed = clamp(abs((speed * (1 / room_speed)) * 6),0,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>instance_exists(turret)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turret
if(!turret_locked)
{
    turret.angle_target = point_direction(turret.x,turret.y,mouse_x,mouse_y);
}
var offset = get_offset(direction,turret_offset_x,turret_offset_y);
turret.x = x + offset[0];
turret.y = y + offset[1];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if destroyed
if(hp &lt;= 0)
{
    //Destroy Tank
    with(turret)
    {
        instance_change(obj_Tank_Turret_Destroyed,true);
    }
    if(obj_Player.in_vehicle == self.id)
    {
        with(obj_Player)
        {
            exit_vehicle();
        }
    }
    if(driver != noone)
    {
        driver.in_vehicle = noone;
    }
    instance_change(obj_Tank_Destroyed,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Resolution
var prev_dir = direction;
//direction = 0;

if(place_meeting(x,y,obj_solid))
{
    x = xprevious;
    y = yprevious;    

    //advance position to meet obstruction
    if(vspeed &gt; 0)
    {
        move_contact_solid(270,vspeed);
        if(!place_free(x,y+1))
        {
            vspeed = 0;
        }
    }
    else if(vspeed &lt; 0)
    {
        move_contact_solid(90,-vspeed);
        if(!place_free(x,y-1))
        {
            vspeed = 0;
        }
    }
    if(hspeed &gt; 0)
    {
        move_contact_solid(0,hspeed);
        if(!place_free(x+1,y))
        {
            hspeed = 0;
        }
    }
    else if(hspeed &lt; 0)
    {
        move_contact_solid(180,-hspeed);
        if(!place_free(x-1,y))
        {
            hspeed = 0;
        }
    }
} 
direction = prev_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Driver / sound
can_drive = driver != noone;
if(team != driver.team &amp;&amp; can_drive)
{
    team = driver.team;
    start_sound = audio_play_sound(snd_Tank_Start,0.4,false);
}
if(!can_drive &amp;&amp; team != TEAM_NONE)
{
    team = TEAM_NONE;
}

engine_pitch = lerp(1,1.5,(abs(speed) / top_speed));
if(audio_is_playing(engine_sound) &amp;&amp; !audio_is_playing(start_sound))
{
    audio_sound_pitch(engine_sound,engine_pitch);
}

if(engine_sound == -1 &amp;&amp; can_drive)
{
    engine_sound = audio_play_sound(snd_Tank_Engine,0.4,true);
}
if(!can_drive &amp;&amp; audio_is_playing(engine_sound))
{
    audio_stop_sound(engine_sound);
    engine_sound = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>can_drive</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tank Movement
if(keyboard_check(key_forward))
{
    speed = min(speed + (accel + friction),top_speed);
}
if(keyboard_check(key_backward))
{
    speed = max(speed - (accel + friction),-top_speed);
}

image_angle = direction;
var pre_rot = place_meeting(x,y,obj_wall);
var prev_dir = direction;
if(keyboard_check(key_left))
{
    direction += turn_speed;
    if(turret_locked)
    {
        turret.direction += turn_speed;
        turret.angle_target += turn_speed;
    }
    image_speed = 1;
}
if(keyboard_check(key_right))
{
    direction -= turn_speed;
    if(turret_locked)
    {
        turret.direction -= turn_speed;
        turret.angle_target -= turn_speed;
    }
    image_speed = 1;
}

image_angle = direction;
var post_rot = place_meeting(x,y,obj_wall);
if(!pre_rot &amp;&amp; post_rot)
{
    var post_dir = direction;
    direction = prev_dir;
    for(var i = prev_dir;i &lt; post_dir;i++)
    {
        direction = i;
        image_angle = direction;
        if(place_meeting(x,y,obj_wall))
        {
            direction = i - 1;
            break;
        }
    }
}

if(keyboard_check(key_brake))
{
    friction = brake_power;
}
else
{
    friction = decel;
}
if(keyboard_check_pressed(key_lock))
{
    turret_locked = !turret_locked;
}

image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dust Particles
if(background_index[0] == back_desert)
{
    if(image_speed != 0)
    {
        for(var i = 0; i &lt; (sprite_width - (14 * image_xscale)); i += 40)
        {
            var off1 = get_offset(direction,(sprite_width - sprite_xoffset) - i,sprite_yoffset);
            var off2 = get_offset(direction,(sprite_width - sprite_xoffset) - i,-1 * (sprite_height - sprite_yoffset));
            
            var color1 = make_color_rgb(164,133,87);
            var color2 = make_color_rgb(192,148,111);
            part_type_color2(global.part_dust,color2,color1);
            
            part_particles_create(global.part_system_below,x + off1[0],y + off1[1],global.part_dust,1);
            part_particles_create(global.part_system_below,x + off2[0],y + off2[1],global.part_dust,1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Unit_Par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.id != driver &amp;&amp; abs(speed) &gt; 2 &amp;&amp; !other.on_vehicle)
{
    other.hp = 0;
    other.direction = point_direction(other.x,other.y,x,y);
    repeat(30)
    {
        var blood = instance_create(other.x + (random(40) - random(40)),other.y + (random(40) - random(40)),obj_blood_spray);
        var dir;
        if(speed &gt; 0)
        {
            dir = direction;
        }
        else
        {
            dir = direction + 180;
        }
        blood.image_angle = random_range(dir - 90,dir + 90);
    }
}

if(!other.on_vehicle &amp;&amp; speed == 0)
{
    other.on_vehicle = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(global.draw_debug)
{
    draw_set_color(c_white);
    draw_set_font(fnt_Main_Small);
    draw_text_outline(x,y - sprite_height / 2 + 5,"Team: " + string(team),2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
