<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_explosion</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>explosion_power = 600;
explosion_radius = 200;
image_speed = 0;

exploded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!exploded)
{
    global.shake_camera_amount = 40;
    global.shake_camera = 8;
    
    with(obj_Unit_Par)
    {
        var dist = point_distance(x,y,other.x,other.y);
        var damage = lerp(other.explosion_power,5,(dist / other.explosion_radius));
        if(dist &lt;= other.explosion_radius)
        {
            hp -= damage;
            if(hp &lt;= 0)
            {
                direction = point_direction(other.x,other.y,x,y);
                speed = (other.explosion_power / 20) * abs(power(dist / other.explosion_radius,2) - 1);
            }
        }
    }
    
    with(obj_Generic_Enemy_Dead)
    {
        var dist = point_distance(x,y,other.x,other.y);
        if(dist &lt;= other.explosion_radius)
        {
            direction = point_direction(other.x,other.y,x,y);
            speed = (other.explosion_power / 20) * abs(power(dist / other.explosion_radius,2) - 1);
        }
    }
    
    with(obj_Vehicle)
    {
        var dist = point_distance(x,y,other.x,other.y);
        var damage = lerp(other.explosion_power,5,(dist / other.explosion_radius));
        if(dist &lt;= other.explosion_radius)
        {
            hp -= damage;
            if(hp &lt;= 0)
            {
                direction = point_direction(x,y,other.x,other.y);
            }
        }
    }
    image_speed = 1;
    
    exploded = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,128</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
