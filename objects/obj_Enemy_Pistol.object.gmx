<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
bullet_speed = 25;
bullet_x_offset = 61;
bullet_y_offset = 0;
show_muzzle_flash = false;
cooldown = 0.25 * room_speed; //seconds cooldown between shots
cooled_down = true;
reload_time = 1.25 * room_speed; //1 second to reload
reloading = false;
mag_size = 8; //Magazine size
mag_ammo = mag_size; //Ammo in magazine
max_ammo = -1 //-1 is infinite
ammo = -1
can_fire = true;
accuracy = 2; //Higher numbers are worse, 0 hits cursor every time
name = "Pistol";
sound = snd_Pistol;

shoot = false;

owner = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload
var amount;
if(max_ammo != -1)
{
    amount = min(mag_size,ammo,(mag_size - mag_ammo));
    ammo -= amount;
    mag_ammo += amount;
}
else
{
    mag_ammo = mag_size;
}
reloading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cool Down
cooled_down = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
if(owner != -1)
{
    can_fire = cooled_down &amp;&amp; !reloading &amp;&amp; (mag_ammo &gt; 0);
    if((mag_ammo &lt;= 0 || (keyboard_check_pressed(ord('R')) &amp;&amp; mag_ammo &lt; mag_size)) &amp;&amp; !reloading)
    {
        alarm[1] = reload_time;
        reloading = true;
    }
    
    if(can_fire &amp;&amp; shoot)
    {
        var offset = get_offset(owner.image_angle,bullet_x_offset / 2,bullet_y_offset);
        var casing = instance_create(owner.x + offset[0],owner.y + offset[1],obj_bullet_casing);
        casing.speed = bullet_speed;
        casing.direction = owner.image_angle - random_range(80,100);
        casing.sprite_index = spr_small_bullet_casing;
        offset = get_offset(owner.image_angle,bullet_x_offset,bullet_y_offset);
        var bullet = instance_create(owner.x + offset[0],owner.y + offset[1],obj_bullet);
        bullet.direction = owner.image_angle + random_range(-accuracy,accuracy);
        bullet.speed = bullet_speed;
        bullet.owner = owner;
        cooled_down = false;
        alarm[0] = cooldown;
        show_muzzle_flash = true;
        owner.image_speed = 1;
        mag_ammo--;
        shoot = false;
        
        if(sound != -1)
        {
            audio_play_sound(sound,0.5,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_muzzle_flash)
{
    var offset = get_offset(owner.image_angle,bullet_x_offset,bullet_y_offset);
    draw_sprite_ext(spr_Pistol_Muzzle_Flash,0,owner.x + offset[0],owner.y + offset[1],1,1,owner.image_angle,c_white,1);
    show_muzzle_flash = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
