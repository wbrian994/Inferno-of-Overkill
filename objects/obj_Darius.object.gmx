<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Darius_Pistol</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Player</parentName>
  <maskName>spr_Darius_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
image_speed = 0;
team = TEAM_FRIENDLY;

//Vars
friction = 1;
maxWalkSpeed = 8;
acceleration = 1.25;

//Inventory
    //Constants
    pistol = 0;
    machine_gun = 1;
    shotgun = 2;
    laser_rifle = 8;
inventory_size = 9;
inv_current_slot = 0;
inv_prev_slot = -1;
//Clear all inventory slots and add pistol
for(var i = 0; i &lt; inventory_size; i++)
{
    inv[i] = -1;
}

max_hp = 175;
hp = max_hp;

inv[0] = instance_create(x,y,obj_Pistol);
inv[0].owner = self.id;


//Keybindings
key_up = ord('W');
key_down = ord('S');
key_left = ord('A');
key_right = ord('D');
key_action = ord('E');
mouse_fire = mb_left;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vehicle stuff
in_vehicle = noone;
vehicle_radius = 200;
can_enter_vehicle = noone;

//on enter/exit
v_entering = false;
v_exiting = false;
v_camera_zoom_time = 0.5 * room_speed;
v_camera_zoom_counter = 0;
v_camera_zoom_start = global.camera_zoom;
v_camera_zoom_amount = 1.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHEATS
god_mode = false;
ghost_mode = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Overlay
//overlay
dmg_overlay = spr_Damage_Overlay;
overlay_alpha = 0;

//damage flash
dmg_time = 0.25 * room_speed;
dmg_counter = dmg_time;
dmg_alpha_max = 0.4;
dmg_alpha_min = 0;
dmg_alpha = dmg_alpha_min;
dmg_flash = false;

//health flash
hlt_time = 1 * room_speed;
hlt_counter = hlt_time;
hlt_alpha_max = 0.9;
hlt_alpha_min = 0;
hlt_alpha = hlt_alpha_min;
hlt_flash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; inventory_size;i++)
{
    if(inv[i] != -1)
    {
        with(inv[i])
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Angle / Check if dead / cheats
image_angle += turn_towards(image_angle,look_target,45);

if(hp &lt;= 0 &amp;&amp; !god_mode)
{
    if(in_vehicle != noone)
    {
        exit_vehicle();
    }
    instance_change(obj_Darius_Dead,true);
}

if(god_mode)
{
    hp = max_hp;
}

if(keyboard_check(vk_f3))
{
    if(keyboard_check_pressed(ord('G')))
    {
        god_mode = !god_mode;
    }
    if(keyboard_check_pressed(ord('H')))
    {
        ghost_mode = !ghost_mode;
    }
}

if(ghost_mode &amp;&amp; team != TEAM_NONE)
{
    team = TEAM_NONE;
    image_blend = c_dkgray;
}

if(!ghost_mode &amp;&amp; team == TEAM_NONE)
{
    team = TEAM_FRIENDLY;
    image_blend = c_white;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Experimental Manual Collision Resolution


//keep collisions axis aligned
var oldia = image_angle;
image_angle = 0;

var foundCollision = collision_rectangle(bbox_left + min(0, -hspeed), bbox_top + min(0, -vspeed), bbox_right + max(0, -hspeed), bbox_bottom + max(0, -vspeed), obj_solid, false, true);

if(foundCollision)
{
    //return to previous position
    x = xprevious;
    y = yprevious;
    
    //advance position to meet obstruction
    if(vspeed &gt; 0)
    {
        move_contact_solid(270,vspeed);
        if(!place_free(x,y+1))
        {
            vspeed = 0;
        }
    }
    else if(vspeed &lt; 0)
    {
        move_contact_solid(90,-vspeed);
        if(!place_free(x,y-1))
        {
            vspeed = 0;
        }
    }
    if(hspeed &gt; 0)
    {
        move_contact_solid(0,hspeed);
        if(!place_free(x+1,y))
        {
            hspeed = 0;
        }
    }
    else if(hspeed &lt; 0)
    {
        move_contact_solid(180,-hspeed);
        if(!place_free(x-1,y))
        {
            hspeed = 0;
        }
    }
}

image_angle = oldia;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
var look_offset = get_offset(point_direction(x,y,mouse_x,mouse_y),0,inv[inv_current_slot].bullet_y_offset);
look_target = point_direction(x + look_offset[0],y + look_offset[1],mouse_x,mouse_y);

if(keyboard_check(key_up))
{
    if(abs(vspeed) &lt;= maxWalkSpeed)
    {
        vspeed = max(vspeed - (acceleration + friction),-maxWalkSpeed);
    }
}
if(keyboard_check(key_down))
{
    if(abs(vspeed) &lt;= maxWalkSpeed)
    {
        vspeed = min(vspeed + (acceleration + friction),maxWalkSpeed);
    }
}
if(keyboard_check(key_left))
{
    if(abs(hspeed) &lt;= maxWalkSpeed)
    {
        hspeed = max(hspeed - (acceleration + friction),-maxWalkSpeed);
    }
}
if(keyboard_check(key_right))
{
    if(abs(hspeed) &lt;= maxWalkSpeed)
    {
        hspeed = min(hspeed + (acceleration + friction),maxWalkSpeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Inventory
//Keys
if(in_vehicle == noone)
{
    if(keyboard_check_pressed(ord('1')))
    {
        if(inv[0] != -1)
        {
            inv_current_slot = 0;
        }
    }
    if(keyboard_check_pressed(ord('2')))
    {
        if(inv[1] != -1)
        {
            inv_current_slot = 1;
        }
    }
    if(keyboard_check_pressed(ord('3')))
    {
        if(inv[2] != -1)
        {
            inv_current_slot = 2;
        }
    }
    if(keyboard_check_pressed(ord('9')))
    {
        if(inv[8] != -1)
        {
            inv_current_slot = 8;
        }
    }
}
//Slot Changed
if(inv_prev_slot != inv_current_slot)
{
    switch(inv_current_slot)
    {
        case 0:
            sprite_index = spr_Darius_Pistol;
            break;
        case 1:
            sprite_index = spr_Darius_Machine_Gun;
            break;
        case 2:
            sprite_index = spr_Darius_Shotgun;
            break;
        case 8:
            sprite_index = spr_Darius_Laser_Rifle;
            break;
    }
    instance_activate_object(inv[inv_current_slot]);
    for(var i = 0; i &lt; inventory_size;i++)
    {
        if(i != inv_current_slot &amp;&amp; inv[i] != -1)
        {
            if(i == 8 &amp;&amp; inv[i].laser != noone)
            {
                with(inv[i].laser)
                {
                    instance_destroy();
                }
            }
            instance_deactivate_object(inv[i]);
        }
    }
    inv_prev_slot = inv_current_slot;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vehicle Stuff
can_enter_vehicle = collision_circle(x,y,vehicle_radius,obj_Vehicle,false,true);
if(can_enter_vehicle != noone)
{
    var test = collision_line(x,y,can_enter_vehicle.x,can_enter_vehicle.y,obj_solid,false,true);
    if(test)
    {
        can_enter_vehicle = noone;
    }
}
if(in_vehicle != noone)
{
    can_enter_vehicle = noone;
    
    visible = false;
    x = in_vehicle.x;
    y = in_vehicle.y;
    
    if(keyboard_check_pressed(key_action))
    {
        exit_vehicle();
    }
}
if(can_enter_vehicle != noone &amp;&amp; keyboard_check_pressed(key_action))
{
    v_camera_zoom_counter = 0;
    v_entering = true;
    v_exiting = false;
    in_vehicle = can_enter_vehicle;
    in_vehicle.driver = self.id;
    if(inv[inv_current_slot] != -1)
        instance_deactivate_object(inv[inv_current_slot]);
}

if(v_entering)
{
    global.camera_zoom = lerp(v_camera_zoom_start,v_camera_zoom_amount,(v_camera_zoom_counter / v_camera_zoom_time));
    v_camera_zoom_counter++;
    if(global.camera_zoom == v_camera_zoom_amount)
    {
        v_camera_zoom_counter = 0;
        v_entering = false;
    }
}

if(v_exiting)
{
    global.camera_zoom = lerp(v_camera_zoom_amount,v_camera_zoom_start,(v_camera_zoom_counter / v_camera_zoom_time));
    v_camera_zoom_counter++;
    if(global.camera_zoom == v_camera_zoom_start)
    {
        v_camera_zoom_counter = 0;
        v_exiting = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Laser_Rifle_Pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(inv[laser_rifle] == -1)
{
    inv[laser_rifle] = instance_create(x,y,obj_Laser_Rifle);
    instance_deactivate_object(inv[laser_rifle]);
    inv[laser_rifle].owner = self.id;
    other.ammo = 0; //destroys pickup
    if(inv_current_slot &lt; laser_rifle)
    {
        inv_current_slot = laser_rifle;
    }
    
    //text
    var text = instance_create(x,y,obj_Pickup_Text);
    text.Text = "Picked Up Laser Pistol";
    text.color = c_lime;
}
else
{
    if(inv[laser_rifle].max_ammo != -1)
    {
        var amount = min(inv[laser_rifle].max_ammo - inv[laser_rifle].ammo,other.ammo);
        inv[laser_rifle].ammo += amount;
        other.ammo -= amount;
        if(amount &gt; 0)
        {
            var text = instance_create(x,y,obj_Pickup_Text);
            text.Text = "+" + string(amount) + " Battery";
            text.color = c_green;
        }
    }
    else
    {
        other.ammo = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Shotgun_Pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(inv[shotgun] == -1)
{
    inv[shotgun] = instance_create(x,y,obj_Shotgun);
    instance_deactivate_object(inv[shotgun]);
    inv[shotgun].owner = self.id;
    other.ammo = 0; //destroys pickup
    if(inv_current_slot &lt; shotgun)
    {
        inv_current_slot = shotgun;
    }
    
    //text
    var text = instance_create(x,y,obj_Pickup_Text);
    text.Text = "Picked Up Shotgun";
    text.color = c_lime;
}
else
{
    if(inv[shotgun].max_ammo != -1)
    {
        var amount = min(inv[shotgun].max_ammo - inv[shotgun].ammo,other.ammo);
        inv[shotgun].ammo += amount;
        other.ammo -= amount;
        if(amount &gt; 0)
        {
            var text = instance_create(x,y,obj_Pickup_Text);
            text.Text = "+" + string(amount) + " Shotgun Shells";
            text.color = c_green;
        }
    }
    else
    {
        other.ammo = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Machine_Gun_Pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(inv[machine_gun] == -1)
{
    inv[machine_gun] = instance_create(x,y,obj_Machine_Gun);
    instance_deactivate_object(inv[machine_gun]);
    inv[machine_gun].owner = self.id;
    other.ammo = 0; //destroys pickup
    if(inv_current_slot &lt; machine_gun)
    {
        inv_current_slot = machine_gun;
    }
    
    //text
    var text = instance_create(x,y,obj_Pickup_Text);
    text.Text = "Picked Up Machine Gun";
    text.color = c_lime;
}
else
{
    if(inv[machine_gun].max_ammo != -1)
    {
        var amount = min(inv[machine_gun].max_ammo - inv[machine_gun].ammo,other.ammo);
        inv[machine_gun].ammo += amount;
        other.ammo -= amount;
        if(amount &gt; 0)
        {
            var text = instance_create(x,y,obj_Pickup_Text);
            text.Text = "+" + string(amount) + " Machine Gun Ammo";
            text.color = c_green;
        }
    }
    else
    {
        other.ammo = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Ammo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.owner != self.id)
{
    dmg_flash = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Health_Pack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hp &lt; max_hp)
{
    with(other)
    {
        instance_destroy();
    }
    hp = max_hp;
    hlt_flash = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage overlay
var a = application_get_position();
var xx = a[0];
var yy = a[1];
var ww = a[2] - a[0];
var hh = a[3] - a[1];

//Draw flash
if(dmg_flash)
{
    dmg_counter = 0;
    dmg_flash = false;
}
draw_set_alpha(lerp(dmg_alpha_max,dmg_alpha_min,(dmg_counter / dmg_time)));
draw_set_color(c_red);
draw_rectangle(xx,yy,xx + ww,yy + hh,false);
draw_set_alpha(1);
if(dmg_counter &lt; dmg_time)
{
    dmg_counter++;
}

//Draw health flash
if(hlt_flash)
{
    hlt_counter = 0;
    hlt_flash = false;
}
draw_set_alpha(lerp(hlt_alpha_max,hlt_alpha_min,power(hlt_counter / hlt_time,2)));
draw_set_color(c_white);
draw_rectangle(xx,yy,xx + ww,yy + hh,false);
draw_set_alpha(1);
if(hlt_counter &lt; hlt_time)
{
    hlt_counter++;
}

//Draw overlay
overlay_alpha = lerp(1,0,(clamp(hp,0,max_hp / 3) / (max_hp / 3)));
var spr_width = sprite_get_width(dmg_overlay);
var spr_height = sprite_get_height(dmg_overlay);
draw_sprite_ext(dmg_overlay,0,xx,yy,ww / spr_width,hh / spr_height,0,c_white,overlay_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a = application_get_position();
var xx = a[0];
var yy = a[1];
var ww = a[2] - a[0];
var hh = a[3] - a[1];

draw_set_font(fnt_main);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
var str = string(inv[inv_current_slot].name);
draw_text_outline(ww / 2,hh,str,2);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if(can_enter_vehicle != noone)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_outline(ww / 2, hh / 2,"Press 'E' to enter " + string(can_enter_vehicle.name),2);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.draw_debug)
{   
    if(can_enter_vehicle != noone)
    {
        draw_set_color(c_green);
    }
    else
    {
        draw_set_color(c_red);
    }
    draw_set_alpha(0.45);
    draw_circle(x,y,vehicle_radius,false);
    draw_set_alpha(1);
    draw_circle(x,y,vehicle_radius,true);
    
    //draw bbox
    var oldia = image_angle;
    image_angle = 0;
    draw_set_color(c_black);
    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true);
    image_angle = oldia;
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>15,16</point>
    <point>23,23</point>
  </PhysicsShapePoints>
</object>
