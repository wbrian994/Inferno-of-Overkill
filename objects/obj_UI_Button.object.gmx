<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_UI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get Important Game States
a  = application_get_position();
xx = a[0];
yy = a[1];
ww = a[2] - a[0];
hh = a[3] - a[1];

//Default vars
Init = false; //Allows for setting vars outside of create event
Initialized = false; //Prevents double initialization

Text = "Button"
xScale = 1; 
yScale = 1;

hCenter = false; //Center Horizontally?
vCenter = false; //Center Vertically?

xPos = xx + x; //Needed for proper placement
yPos = yy + y; //Needed for proper placement
draw_set_font(fnt_UI_Button);
Width = string_width(Text) * xScale;
Height = string_height(Text) * yScale;

enabled = true;
inFocus = true;

//Handle Centering
if(hCenter)
{
    x = (ww / 2) - (Width / 2);
}
if(vCenter)
{
    y = (hh / 2) - (Height / 2);
}

//Init functional vars
hover = false;
leftpressed = false; //Triggers for 1 update when clicked
leftreleased = false; //Triggers for 1 update when click released
leftdown = false; //Triggers continuously while mouse button is down
rightpressed = false;
rightreleased = false;
rightdown = false;

//Draw Options
sprite = -1;
border_thickness = 2;
grow_scale = 0.25; //Scale the button up by this amount on hover
shrink_scale = 0.15; //Scale the button down by this amount on press
anim_counter = 0;
color_default = c_yellow;
color_hover = c_red;
color_disabled = c_dkgray;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Init &amp;&amp; !Initialized)
{
    //Initialize button
    Initialized = true;
}
//Update Positions
draw_set_font(fnt_UI_Button); //this is necessary for the width/height functions
if(sprite == -1)
{
    Width = string_width(Text) * xScale;
    Height = string_height(Text) * yScale;
}
else
{
    Width = sprite_get_width(sprite) * xScale;
    Height = sprite_get_height(sprite) * yScale;
}
a  = application_get_position();
xx = a[0];
yy = a[1];
ww = a[2] - a[0];
hh = a[3] - a[1];
if(hCenter)
{
    x = (ww / 2) - (Width / 2);
}    
if(vCenter)
{
    y = (hh / 2) - (Height / 2);
}
xPos = x;
yPos = y;
var mouse;
mouse[0] = window_mouse_get_x() - xx;
mouse[1] = window_mouse_get_y() - yy;

//Update Button
if(enabled &amp;&amp; inFocus)
{
    if((mouse[0] &gt;= xPos &amp;&amp; mouse[0] &lt;= xPos + Width) &amp;&amp; (mouse[1] &gt;= yPos &amp;&amp; mouse[1] &lt;= yPos + Height))
    {
        hover = true;
    }
    else
    {
        hover = false;
    }
    
    if(hover &amp;&amp; mouse_check_button(mb_left))
    {
        leftdown = true;
    }
    else
    {
        leftdown = false;
    }
    
    if(hover &amp;&amp; mouse_check_button_pressed(mb_left))
    {
        leftpressed = true;
    }
    else
    {
        leftpressed = false;
    }
    
    if(hover &amp;&amp; mouse_check_button_released(mb_left))
    {
        leftreleased = true;
    }
    else
    {
        leftreleased = false;
    }
    
    if(hover &amp;&amp; mouse_check_button(mb_right))
    {
        rightdown = true;
    }
    else
    {
        rightdown = false;
    }
    
    if(hover &amp;&amp; mouse_check_button_pressed(mb_right))
    {
        rightpressed = true;
    }
    else
    {
        rightpressed = false;
    }
    
    if(hover &amp;&amp; mouse_check_button_released(mb_right))
    {
        rightreleased = true;
    }
    else
    {
        rightreleased = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_UI_Button);
if(enabled &amp;&amp; inFocus)
{
    if(sprite != -1)
    {
        if(!hover &amp;&amp; !leftdown)
        {
            var axScale, ayScale, diffX, diffY;
            anim_counter = clamp(anim_counter - 0.1,0,1);
            axScale = lerp(xScale,xScale + grow_scale,anim_counter); //actual x scale
            ayScale = lerp(yScale,yScale + grow_scale,anim_counter); //actual y scale
            diffX = ((sprite_get_width(sprite) * axScale) - Width) / 2; //Width difference to keep button in place
            diffY = ((sprite_get_height(sprite) * ayScale) - Height) / 2; //Height difference to keep button in place
            draw_sprite_ext(sprite,0,xPos - diffX,yPos - diffY,axScale,ayScale,0,c_white,1);       
        }
        else
        {
            if(!leftdown)
            {
                var axScale, ayScale, diffX, diffY;
                anim_counter = clamp(anim_counter + 0.1,0,1);
                axScale = lerp(xScale,xScale + grow_scale,anim_counter); //actual x scale
                ayScale = lerp(yScale,yScale + grow_scale,anim_counter); //actual y scale
                diffX = ((sprite_get_width(sprite) * axScale) - Width) / 2; //Width difference to keep button in place
                diffY = ((sprite_get_height(sprite) * ayScale) - Height) / 2; //Height difference to keep button in place
                draw_sprite_ext(sprite,0,xPos - diffX,yPos - diffY,axScale,ayScale,0,c_white,1); 
            }
            else
            {
                var axScale, ayScale, diffX, diffY;
                axScale = xScale - grow_scale; //actual x scale
                ayScale = yScale - grow_scale; //actual y scale;
                diffX = ((sprite_get_width(sprite) * axScale) - Width) / 2; //Width difference to keep button in place
                diffY = ((sprite_get_height(sprite) * ayScale) - Height) / 2; //Height difference to keep button in place
                
                draw_sprite_ext(sprite,0,xPos - diffX,yPos - diffY,axScale,ayScale,0,c_white,1);
            }
        }
    }
    else
    {
        if(!hover &amp;&amp; !leftdown)
        {
            draw_set_color(color_lerp(color_default,color_hover,anim_counter));
            var axScale, ayScale, diffX, diffY;
            anim_counter = clamp(anim_counter - 0.1,0,1);
            axScale = lerp(xScale,xScale + grow_scale,anim_counter); //actual x scale
            ayScale = lerp(yScale,yScale + grow_scale,anim_counter); //actual y scale;
            diffX = ((string_width(Text) * axScale) - Width) / 2; //Width difference to keep button in place
            diffY = ((string_height(Text) * ayScale) - Height) / 2; //Height difference to keep button in place
            draw_text_outline_color_transformed(xPos - diffX,yPos - diffY,Text,border_thickness,color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),1,c_black,axScale,ayScale,image_angle);
        }
        else
        {
            draw_set_color(color_lerp(color_default,color_hover,anim_counter));
            if(!leftdown)
            {
                var axScale, ayScale, diffX, diffY;
                anim_counter = clamp(anim_counter + 0.1,0,1);
                axScale = xScale + lerp(0,grow_scale,anim_counter); //actual x scale
                ayScale = yScale + lerp(0,grow_scale,anim_counter); //actual y scale;
                diffX = ((string_width(Text) * axScale) - Width) / 2; //Width difference to keep button in place
                diffY = ((string_height(Text) * ayScale) - Height) / 2; //Height difference to keep button in place
                
                draw_text_outline_color_transformed(xPos - diffX,yPos - diffY,Text,border_thickness,color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),1,c_black,axScale,ayScale,image_angle);
            }
            else
            {
                var axScale, ayScale, diffX, diffY;
                axScale = xScale - grow_scale; //actual x scale
                ayScale = yScale - grow_scale; //actual y scale;
                diffX = ((string_width(Text) * axScale) - Width) / 2; //Width difference to keep button in place
                diffY = ((string_height(Text) * ayScale) - Height) / 2; //Height difference to keep button in place
                
                draw_text_outline_color_transformed(xPos - diffX,yPos - diffY,Text,border_thickness,color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_dkgray,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),color_lerp(c_red,c_red,anim_counter),1,c_black,axScale,ayScale,image_angle);
            }
        }
    }
}
else
{
    draw_set_color(color_disabled);
    draw_text_outline_transformed(xPos,yPos,Text,border_thickness,xScale,yScale,image_angle);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
