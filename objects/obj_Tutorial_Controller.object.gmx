<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>music = -1;//play_music(snd_Game_Music,true);
global.player_max_lives = -1;
paused = false;
pause_menu = noone;
if(global.is_christmas)
{
    var light = instance_create(0,0,obj_lightmap);
    light.ambient_light = 0.5;
    background_visible[1] = true;
    background_visible[2] = true;
    background_foreground[1] = true;
    background_foreground[2] = true;
    background_x[1] = 200;
    background_y[1] = 100;
    background_index[1] = back_snow;
    background_index[2] = back_snow;
    background_hspeed[1] = 2;
    background_hspeed[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tutorial Stuff
show_gun_area = false;
gun_area_done = false;

show_inv_area = false;
inv_area_done = false;

show_nav_area = false;
nav_area_done = false;

show_health_area = false;
health_area_done = false;

tutorial_ending = false;

end_text = "Tutorial Complete";

alpha = 0;

text_scale = 10;

counter = 0;
text_state_falling = 0;
text_state_waiting = 1;

text_current_state = text_state_falling;

text_fall_time = 0.5 * room_speed;
text_wait_time = 5 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tutorial stuff
if(gun_area_done)
{
    show_gun_area = false;
}
if(inv_area_done)
{
    show_inv_area = false;
}
if(nav_area_done)
{
    show_nav_area = false;
}
if(health_area_done)
{
    show_health_area = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('R')))
{
    room_restart();
}

if(keyboard_check_pressed(vk_escape))
{
    if(!paused)
    {
        pause_game(true);
    }
}

/*
if(audio_is_playing(music) &amp;&amp; paused)
{
    audio_pause_sound(music);
}

if(audio_is_paused(music) &amp;&amp; !paused)
{
    audio_resume_sound(music);
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tutorial Stuff
if(instance_exists(obj_Player))
{
    if(!gun_area_done &amp;&amp; keyboard_check_pressed(ord('R')))
    {
        show_gun_area = true;
        gun_area_done = true;
        alarm[0] = 10 * room_speed;
    }
    
    if(!inv_area_done &amp;&amp; obj_Player.inv[1] != -1)
    {
        show_gun_area = false;
    
        show_inv_area = true;
        inv_area_done = true;
        alarm[0] = 10 * room_speed;
    }
    
    if(!nav_area_done &amp;&amp; obj_Player.y &gt;= 800)
    {
        show_gun_area = false;
    
        show_nav_area = true;
        nav_area_done = true;
        alarm[0] = 4 * room_speed;
        
        with(obj_Generic_Enemy)
        {
            has_nav = true;
        }
    }
    
    if(!health_area_done &amp;&amp; obj_Player.y &gt;= 1184)
    {
        show_gun_area = false;
        show_inv_area = false;
        show_nav_area = false;
    
        show_health_area = true;
        health_area_done = true;
        alarm[0] = 8 * room_speed;
    }
    
    if(!tutorial_ending &amp;&amp; (instance_number(obj_Generic_Enemy) == 0 || keyboard_check_pressed(vk_return)))
    {
        tutorial_ending = true;
        audio_play_sound(snd_Text_Fall,0.5,false);
    }
    
    if(tutorial_ending)
    {
        switch(text_current_state)
        {
            case text_state_falling:
                counter++;
                text_scale = lerp(10,1,power((counter / text_fall_time),2));
                if(counter &gt;= text_fall_time)
                {
                    counter = 0;
                    global.camera_zoom = 0.9;
                    text_current_state = text_state_waiting;
                }
                break;
            case text_state_waiting:
                counter++;
                if(global.camera_zoom &lt; 1)
                {
                    global.camera_zoom = lerp(0.9,1,(counter / (0.15 * room_speed)));
                }
                alpha = lerp(0,1,clamp(power(counter / (text_wait_time - room_speed),2),0,1));
                if(counter &gt;= text_wait_time)
                {
                    room_goto(rm_Test);
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stop_all_music();
stop_all_sounds();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tutorial Stuff
var a = application_get_position();
var xx = a[0];
var yy = a[1];
var ww = a[2] - a[0];
var hh = a[3] - a[1];
if(show_gun_area)
{
    var xPos, yPos, text;
    text = "This is your ammo#The pistol has infinite ammo, but a limited magazine size";
    xPos = ww - 260;
    yPos = hh - 90;
    draw_sprite_ext(spr_Arrow,0,xPos,yPos,1,1,315,c_white,1);
    draw_set_color(c_white);
    draw_set_font(fnt_Main_Small);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(xPos - lengthdir_x(110,315),yPos - lengthdir_y(110,315),text);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_line_width(ww,yPos + 5,xPos + 5,yPos + 5,2);
    draw_line_width(xPos + 5,hh,xPos + 5,yPos + 5,2);
}

if(show_inv_area)
{
    var xPos, yPos, text;
    text = "This is your inventory#Notice on the bottom, it displays#your selected weapon and available weapons";
    xPos = 210;
    yPos = hh - 210;
    draw_sprite_ext(spr_Arrow,0,xPos,yPos,1,1,225,c_white,1);
    draw_set_color(c_white);
    draw_set_font(fnt_Main_Small);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(xPos - lengthdir_x(110,225),yPos - lengthdir_y(110,225),text);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_line_width(0,yPos,xPos,yPos,2);
    draw_line_width(xPos,hh,xPos,yPos,2);
}

if(show_nav_area)
{
    var centerX, centerY, xPos, yPos, text;
    text = "Nav Points will point toward your next objective"
    centerX = (ww / 2);
    centerY = (hh / 2);
    xPos = centerX;
    yPos = centerY + 295;
    draw_set_color(c_white);
    draw_rectangle(centerX - 300,centerY - 300, centerX + 300, centerY + 300,true);
    draw_sprite_ext(spr_Arrow,0,xPos,yPos,1,1,270,c_white,1);
    draw_set_font(fnt_Main_Small);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(xPos - lengthdir_x(110,270),yPos - lengthdir_y(110,270),text);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

if(show_health_area)
{
    var xPos, yPos, text;
    text = "This bar represents your health#As your health decreases this bar will go down and turn red#If your health is really low a red aura will surround your vision";
    xPos = (ww / 2);
    yPos = 40;
    draw_sprite_ext(spr_Arrow,0,xPos,yPos,1,1,90,c_white,1);
    draw_set_color(c_white);
    draw_set_font(fnt_Main_Small);
    draw_set_halign(fa_center);
    draw_text(xPos - lengthdir_x(110,90),yPos - lengthdir_y(110,90),text);
    draw_set_halign(fa_left);
    draw_line_width(xPos - 255,0,xPos - 255,yPos - 5,2);
    draw_line_width(xPos + 255,0,xPos + 255,yPos - 5,2);
    draw_line_width(xPos - 255,yPos - 5,xPos + 255,yPos - 5,2);
}

if(tutorial_ending)
{
    draw_set_color(c_black);
    draw_set_alpha(alpha);
    draw_rectangle(0,0,ww,hh,false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_Main_Large);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_outline_transformed(ww / 2,hh / 2,end_text,2,text_scale,text_scale,0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
