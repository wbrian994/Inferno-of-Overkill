<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
bullet_speed = 20;
bullet_x_offset = 43;
bullet_y_offset = 0;
show_muzzle_flash = false;
cooldown = 0.2 * room_speed; //seconds cooldown between shots
cooled_down = true;
reload_time = 1 * room_speed; //1 second to reload
reloading = false;
mag_size = 8; //Magazine size
mag_ammo = mag_size; //Ammo in magazine
max_ammo = -1 //-1 is infinite
ammo = -1
can_fire = true;
accuracy = 2; //Higher numbers are worse, 0 hits cursor every time
recoil = 2;
name = "M1911";

sound = snd_Pistol;
reload_sound = snd_Pistol_Reload;

crosshair = spr_Crosshair;

owner = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove Lights
if(global.is_christmas &amp;&amp; instance_exists(light))
{
    with(light)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload
var amount;
if(max_ammo != -1)
{
    amount = min(mag_size,ammo,(mag_size - mag_ammo));
    ammo -= amount;
    mag_ammo += amount;
}
else
{
    mag_ammo = mag_size;
}
reloading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cool Down
cooled_down = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
if(owner != -1)
{
    can_fire = cooled_down &amp;&amp; !reloading &amp;&amp; (mag_ammo &gt; 0);
    if((mag_ammo &lt;= 0 || (keyboard_check_pressed(ord('R')) &amp;&amp; mag_ammo &lt; mag_size)) &amp;&amp; !reloading)
    {
        alarm[1] = reload_time;
        reloading = true;
        if(ammo != 0)
            audio_play_sound(reload_sound,0.6,false);
    }
    
    if(can_fire &amp;&amp; mouse_check_button_pressed(owner.mouse_fire))
    {
        var offset = get_offset(owner.look_target,bullet_x_offset / 2,bullet_y_offset);
        if(collision_line(owner.x,owner.y,owner.x + offset[0],owner.y + offset[1],obj_solid,false,true) == noone)
        {
            var casing = instance_create(owner.x + offset[0],owner.y + offset[1],obj_bullet_casing);
            casing.speed = bullet_speed;
            casing.direction = owner.look_target - random_range(80,100);
            casing.sprite_index = spr_small_bullet_casing;
            offset = get_offset(owner.look_target,bullet_x_offset,bullet_y_offset);
            var bullet = instance_create(owner.x + offset[0],owner.y + offset[1],obj_bullet);
            bullet.direction = owner.look_target + random_range(-accuracy,accuracy);
            bullet.speed = bullet_speed;
            bullet.owner = owner;
            bullet.damage = 7;
        }
        cooled_down = false;
        alarm[0] = cooldown;
        show_muzzle_flash = true;
        owner.image_speed = 0.5;
        mag_ammo--;
        owner.x += lengthdir_x(recoil,owner.image_angle + 180);
        owner.y += lengthdir_y(recoil,owner.image_angle + 180);
        global.shake_camera_amount = 5;
        global.shake_camera = 2;
        
        if(sound != -1)
        {
            audio_play_sound(sound,0.6,false);
        }
    }
    else if(cooled_down &amp;&amp; ammo == 0 &amp;&amp; mouse_check_button_pressed(owner.mouse_fire))
    {
        audio_play_sound(snd_No_Ammo_Click,0.6,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD
var a = application_get_position();
var xx = a[0];
var yy = a[1];
var ww = a[2] - a[0];
var hh = a[3] - a[1];
draw_set_font(fnt_main);
draw_set_color(c_white);
var ammo_string,mag_string,str_height,str_width,padding,xPos,yPos;
padding = 5;
str_height = string_height("/");
if(ammo != -1 &amp;&amp; max_ammo != -1)
{
    ammo_string = "Ammo: " + string(ammo) + " \ " + string(max_ammo);
}
else
{
    ammo_string = "Ammo: inf. \ inf.";
}

mag_string = "Mag: " + string(mag_ammo) + " \ " + string(mag_size);

str_width = string_width(ammo_string);
xPos = xx + ww - str_width - padding;
yPos = yy + hh - str_height - padding;
draw_text_outline(xPos,yPos,ammo_string,2);

str_width = string_width(mag_string);
xPos = xx + ww - str_width - padding;
yPos = yPos - str_height - padding;
draw_text_outline(xPos,yPos,mag_string,2);

if(reloading)
{
    var str;
    if(ammo &gt; 0 || ammo == -1)
    {
        str = "Reloading ...";
    }
    else
    {
        draw_set_color(c_red);
        str = "No Ammo!";
    }
    str_width = string_width(str);
    xPos = xx + ww - str_width - padding;
    yPos = yPos - str_height - padding;
    draw_text_outline(xPos,yPos,str,2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Crosshair
draw_sprite(crosshair,0,window_mouse_get_x(),window_mouse_get_y());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_muzzle_flash)
{
    var offset = get_offset(owner.look_target,bullet_x_offset,bullet_y_offset);
    draw_sprite_ext(spr_Pistol_Muzzle_Flash,0,owner.x + offset[0],owner.y + offset[1],1,1,owner.look_target,c_white,1);
    show_muzzle_flash = false;
    if(global.is_christmas)
    {
        light = instance_create(owner.x + offset[0],owner.y + offset[1],obj_light);
        light.color = c_yellow;
        light.radius = 30;
        alarm[2] = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
