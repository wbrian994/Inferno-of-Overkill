<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
cutscene_name = "&lt;Name Missing&gt;";
events = ds_list_create();
event_data = ds_list_create();
event_times = ds_list_create();
event_index = 0;
time_counter = 0;
timer = 0; //Used universally

current_music = -1;

//states
running_events = 0;
waiting = 1;
current_state = running_events;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cleanup data structures
ds_list_destroy(events);
ds_list_destroy(event_times);
ds_list_destroy(event_data);
stop_all_music();
change_music_volume(1,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(current_state)
{
    case running_events:
        if(event_index &lt; ds_list_size(events))
        {
            var current_event = ds_list_find_value(events,event_index);
            timer = ds_list_find_value(event_times,event_index);
            var data = ds_list_find_value(event_data,event_index);
            if(current_event == "wait")
            {
                current_state = waiting;
                show_debug_message("cutscene, " + string(cutscene_name) + ", is waiting for " + string(timer) + " steps");
            }
            else if(current_event == "text")
            {
                show_debug_message("cutscene, " + string(cutscene_name) + ", is displaying text '" + string(data) + "'");
                var text = instance_create(0,0,obj_cutscene_text);
                text.time = timer;
                text.text = data;
            }
            else if(current_event == "image")
            {
                show_debug_message("cutscene, " + string(cutscene_name) + ", is displaying image '" + string(data) + "'");
                var image = instance_create(0,0,obj_cutscene_image);
                image.time = timer;
                image.background = data;
            }
            else if(current_event == "music")
            {
                show_debug_message("cutscene, " + string(cutscene_name) + ", is playing music '" + string(data) + "'");
                current_music = play_music(data,false);
            }
            else if(current_event == "volume")
            {
                if(current_music != -1)
                {
                    audio_sound_gain(current_music,data,(timer / room_speed) * 1000);
                }
            }
            else
            {
                show_debug_message("Failed to run event " + string(event_index) + " in cutscene " + string(cutscene_name) + ".");
            }
            
            event_index++;
        }
        else
        {
            show_debug_message("cutscene ending...");
            instance_destroy();
        }
        break;
    case waiting:
        time_counter++;
        if(time_counter &gt;= timer)
        {
            current_state = running_events;
            time_counter = 0;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cleanup data structures
ds_list_destroy(events);
ds_list_destroy(event_times);
ds_list_destroy(event_data);
stop_all_music();
change_music_volume(1,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a = application_get_position();
var xx = a[0];
var yy = a[1];
var ww = a[2] - a[0];
var hh = a[3] - a[1];

var bar_height =  hh * 0.1;

draw_set_color(c_black);
draw_rectangle(0,yy + hh - bar_height,xx + ww,yy + hh,false);
draw_rectangle(0,0,xx + ww,yy + bar_height,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
