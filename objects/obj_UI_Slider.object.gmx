<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_UI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
//Options
width = 500;
height = 30;
bar_thickness = 4;
color1 = c_red;
color2 = c_orange;
text_color1 = c_white;
text_color2 = c_white;
disabled_color = c_gray;
slide_disabled_color = c_white;
slide_border_disabled_color = c_gray;
slide_border_thickness = 1;
slide_border_active_thickness = 3;
show_percentage = true;
slide_radius = 6;
slide_radius_active = 16;
slide_grow_time = 0.1 * room_speed;
slide_grow_counter = 0;
slide_grow_rad = slide_radius;
slide_move_time = 0.1 * room_speed;
slide_move_counter = 0;
slide_move_from = 0;
slide_move_target = 0;
slide_move_lerp = false;
width_percent = -1;
width_prev = width;
precise = false;

//Settings
set_val = false;

//Position
hCenter = false;
vCenter = false;
a = application_get_position();
xx = a[0];
yy = a[1];
ww = a[2] - a[0];
hh = a[3] - a[1];
if(hCenter)
{
    x = (ww / 2) - (width / 2)
}
if(vCenter)
{
    y = (hh / 2) - (height / 2);
}

//Functional Vars
inFocus = true;
slide_pos = 0;
percentage = 0;
mouse_hover_box = false;
mouse_hover_slide = false;
slide_active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
a = application_get_position();
xx = a[0];
yy = a[1];
ww = a[2] - a[0];
hh = a[3] - a[1];
if(width_percent != -1)
{
    width = ww * width_percent;
}
if(width_prev != width)
{
    slide_pos = (percentage / 100) * width;
    width_prev = width;
}
if(hCenter)
{
    x = (ww / 2) - (width / 2)
}
if(vCenter)
{
    y = (hh / 2) - (height / 2);
}
if(inFocus)
{
    var mouse;
    mouse[0] = window_mouse_get_x() - xx;
    mouse[1] = window_mouse_get_y() - yy;
    if(mouse[0] &gt;= x &amp;&amp; mouse[0] &lt;= x + width &amp;&amp; mouse[1] &gt;= y &amp;&amp; mouse[1] &lt;= y + height)
    {
        mouse_hover_box = true;
    }
    else
    {
        mouse_hover_box = false;
    }
    if(mouse[0] &gt;= x + slide_pos - slide_radius_active &amp;&amp; mouse[0] &lt;= x + slide_pos + slide_radius_active &amp;&amp; mouse[1] &gt;= y + (height / 2) - slide_radius_active &amp;&amp; mouse[1] &lt;= y + (height / 2) + slide_radius_active)
    {
        mouse_hover_slide = true;
    }
    else
    {
        mouse_hover_slide = false;
    }
    if(mouse_hover_slide &amp;&amp; mouse_check_button_pressed(mb_left))
    {
        slide_active = true;
        slide_move_lerp = false;
    }
    if(mouse_check_button_released(mb_left) &amp;&amp; slide_active)
    {
        slide_active = false;
    }
    
    if(slide_active)
    {
        slide_pos = clamp(mouse[0] - x,0,width);
        //for slide lerp
        slide_grow_counter = clamp(slide_grow_counter + 1,0,slide_grow_time);
    }
    else
    {
        //for slide lerp
        slide_grow_counter = clamp(slide_grow_counter - 1,0,slide_grow_time);
    }
    //lerp slide
    slide_grow_rad = lerp(slide_radius,slide_radius_active,(slide_grow_counter / slide_grow_time));
    
    if(mouse_hover_box &amp;&amp; !slide_active &amp;&amp; mouse_check_button_pressed(mb_left))
    {
        //slide_pos = clamp(mouse[0] - x,0,width);
        slide_active = true;
        slide_move_lerp = true;
        slide_move_target = clamp(mouse[0] - x,0,width);
        slide_move_from = slide_pos;
    }
    
    if(slide_move_lerp)
    {
        slide_pos = lerp(slide_move_from,slide_move_target,slide_move_counter / slide_move_time);
        slide_move_counter = clamp(slide_move_counter + 1,0,slide_move_time);
        if(slide_pos == slide_move_target)
        {
            slide_move_lerp = false;
        }
    }
    else
    {
        slide_move_counter = 0;
    }
    if(set_val)
    {
        slide_pos = (percentage / 100) * width;
        set_val = false;
    }
    if(!precise)
    {
        percentage = floor((slide_pos / width) * 100);
        if(!slide_active &amp;&amp; !slide_move_lerp)
        {
            slide_pos = (percentage / 100) * width;
        }
    }
    else
    {
        percentage = (slide_pos / width) * 100;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.draw_debug)
{
    draw_set_color(c_black);
    draw_rectangle(x,y,x+width,y+height,true);
}
draw_set_color(disabled_color);
draw_line_width(x,y + (height / 2),x + width,y + (height / 2),bar_thickness);
draw_line_width_colour(x,y + (height / 2),x + slide_pos,y + (height / 2),bar_thickness,color1,color_lerp(color1,color2,percentage / 100));
if(percentage == 0)
{
    draw_set_color(slide_disabled_color);
}
else
{
    draw_set_color(color_lerp(color1,color2,percentage/100));
}
draw_circle(x + slide_pos,y + (height / 2) + (bar_thickness / 4),slide_grow_rad,false);
if(percentage == 0)
{
    draw_set_color(slide_border_disabled_color);
}
if(!slide_active)
{
    draw_circle_border(x + slide_pos,y + (height / 2) + (bar_thickness / 4),slide_grow_rad,slide_border_thickness);
    
}
else
{
    if(percentage == 0)
    {
        draw_circle_border(x + slide_pos,y + (height / 2) + (bar_thickness / 4),slide_grow_rad,slide_border_active_thickness);
    }
    if(show_percentage)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(color_lerp(text_color1,text_color2,percentage / 100));
        draw_set_font(fnt_Main_Tiny);
        draw_text(x + slide_pos,y + (height / 2) + (bar_thickness / 4),string(percentage));
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
