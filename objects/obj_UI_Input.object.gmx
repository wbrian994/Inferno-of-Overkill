<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_UI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Input Field
captured_input = false;
font = fnt_Main_Small;
draw_set_font(font);
back_color = c_white;
text_color = c_black;
placeholder_color = c_gray;
placeholder_text = "Input Field";
text_width = string_width("H");
text_height = string_height("\");
x_padding = 5;
y_padding = 2;
halign = fa_left;
text_halign = fa_left;
width = (30 * text_width) + (2 * x_padding);
height = text_height + (2 * y_padding);
can_delete_multiple = false;
nav_multiple = false;
input_delay = 0.5 * room_speed;
cursor_visible = true;
blink_time = 0.5 * room_speed;
alarm[0] = blink_time;
current_string = "";
cursor_pos = 0;

//functional vars
hover = false;
submit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow Multiple Nav
if(!nav_multiple)
{
    nav_multiple = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow Multiple Backspace
if(!can_delete_multiple)
{
    can_delete_multiple = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make Cursor Blink
cursor_visible = !cursor_visible;
alarm[0] = blink_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
var x_pre = x;
if(halign == fa_center)
    x -= width / 2;
var ms_x = window_mouse_get_x(), ms_y = window_mouse_get_y();
hover = ((ms_x &gt;= x &amp;&amp; ms_x &lt;= x + width) &amp;&amp; (ms_y &gt;= y &amp;&amp; ms_y &lt;= y + height));
if(!captured_input &amp;&amp; hover &amp;&amp; mouse_check_button_pressed(mb_any))
{
    captured_input = true;
    cursor_visible = true;
    keyboard_string = "";
}
if(captured_input &amp;&amp; !hover &amp;&amp; mouse_check_button_pressed(mb_any))
{
    captured_input = false;
}

if(captured_input)
{
    if(keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_right))
    {
        alarm[2] = input_delay;
    }
    if(keyboard_check_released(vk_left) || keyboard_check_released(vk_right))
    {
        alarm[2] = -1;
        nav_multiple = false;
    }
    if(keyboard_check_pressed(vk_left) || (nav_multiple &amp;&amp; keyboard_check(vk_left)))
    {
        cursor_pos = clamp(cursor_pos - 1,0,string_length(current_string));
    }
    if(keyboard_check_pressed(vk_right) || (nav_multiple &amp;&amp; keyboard_check(vk_right)))
    {
        cursor_pos = clamp(cursor_pos + 1,0,string_length(current_string));
    }

    if(string_length(keyboard_string) &gt; 0)
    {
        cursor_pos++;
        keyboard_string = string_replace_all(keyboard_string,"#","\#");
        if(cursor_pos &lt; string_length(current_string))
        {
            current_string = string_insert(keyboard_string,current_string,cursor_pos);
        }
        else
        {
            current_string += keyboard_string;
        }
        cursor_pos += string_length(keyboard_string) - 1;
        keyboard_string = "";
    }
    if(keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_delete))
    {
        alarm[1] = input_delay;
    }
    if(keyboard_check_released(vk_backspace) || keyboard_check_released(vk_delete))
    {
        can_delete_multiple = false;
        alarm[1] = -1;
    }
    if((keyboard_check_pressed(vk_backspace) || (can_delete_multiple &amp;&amp; keyboard_check(vk_backspace))) &amp;&amp; cursor_pos &gt; 0)
    {
        keyboard_string = "";
        cursor_pos--;
        if(cursor_pos + 1 &lt; string_length(current_string))
        {
            current_string = string_copy(current_string,0,cursor_pos) + string_copy(current_string,cursor_pos + 2,string_length(current_string));
        }
        else
        {
            current_string = string_copy(current_string,0,cursor_pos);
        }
    }
    if((keyboard_check_pressed(vk_delete) || (can_delete_multiple &amp;&amp; keyboard_check(vk_delete))) &amp;&amp; cursor_pos &lt; string_length(current_string))
    {
        keyboard_string = "";
        if(cursor_pos + 1 &lt; string_length(current_string))
        {
            current_string = string_copy(current_string,0,cursor_pos) + string_copy(current_string,cursor_pos + 2,string_length(current_string));
        }
        else
        {
            current_string = string_copy(current_string,0,cursor_pos);
        }
    }
    
    if(keyboard_check_pressed(vk_return))
    {
        submit = true;
        captured_input = false;
    }
    else
    {
        submit = false;
    }
}

x = x_pre;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x_pre = x;
if(halign == fa_center)
    x -= width / 2;
draw_set_font(font);
draw_set_color(back_color);
draw_rectangle(x,y,x + width, y + height,false);
draw_set_color(c_black);
draw_rectangle(x,y,x + width, y + height,true);
draw_set_color(text_color);
//Draw Cursor
var str_width = string_width(current_string);
var cursor_x, text_off_x;
draw_set_halign(text_halign);
switch(text_halign)
{
    case fa_left:
        cursor_x = x + x_padding + (string_width(string_copy(current_string,0,cursor_pos)));
        text_off_x = 0;
        break;
    case fa_center:
        cursor_x = ((x + width / 2) - (string_width(current_string) / 2)) + (string_width(string_copy(current_string,0,cursor_pos))) + x_padding;
        text_off_x = width / 2;
        break;
    default:
        cursor_x = x + x_padding + (string_width(string_copy(current_string,0,cursor_pos)));
        text_off_x = 0;
        break;
}
if(cursor_visible &amp;&amp; captured_input)
    draw_line(cursor_x,y + y_padding,cursor_x,y + (height - y_padding));
draw_text(x + x_padding + text_off_x,y + y_padding,current_string);
if(string_length(current_string) == 0)
{
    draw_set_color(placeholder_color);
    draw_text(x + x_padding + text_off_x,y + y_padding,placeholder_text);
}
draw_set_halign(fa_left);
x = x_pre;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
